//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 5 properties.
  struct entitlements {
    static let comAppleSecurityAppSandbox = true
    static let comAppleSecurityFilesUserSelectedReadOnly = true

    struct comAppleDeveloperAssociatedDomains {
      static let applinksIostemplateCom = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:iostemplate.com") ?? "applinks:iostemplate.com"
      static let webcredentialsIostemplateCom = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "webcredentials:iostemplate.com") ?? "webcredentials:iostemplate.com"

      fileprivate init() {}
    }

    struct comAppleSecurityApplicationGroups {
      static let groupComJianxiangShared = infoPlistString(path: ["com.apple.security.application-groups"], key: "group.com.jianxiang.shared") ?? "group.com.jianxiang.shared"

      fileprivate init() {}
    }

    struct keychainAccessGroups {
      static let appIdentifierPrefixComJianxiangIostemplate = infoPlistString(path: ["keychain-access-groups"], key: "$(AppIdentifierPrefix)com.jianxiang.iostemplate") ?? "$(AppIdentifierPrefix)com.jianxiang.iostemplate"
      static let appIdentifierPrefixShared = infoPlistString(path: ["keychain-access-groups"], key: "$(AppIdentifierPrefix)shared") ?? "$(AppIdentifierPrefix)shared"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 44 files.
  struct file {
    /// Resource file `.swiftlint.yml`.
    static let swiftlintYml = Rswift.FileResource(bundle: R.hostingBundle, name: ".swiftlint", pathExtension: "yml")
    /// Resource file `Configuration.json`.
    static let configurationJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Configuration", pathExtension: "json")
    /// Resource file `LanguageList.json`.
    static let languageListJson = Rswift.FileResource(bundle: R.hostingBundle, name: "LanguageList", pathExtension: "json")
    /// Resource file `PrivacyInfo.xcprivacy`.
    static let privacyInfoXcprivacy = Rswift.FileResource(bundle: R.hostingBundle, name: "PrivacyInfo", pathExtension: "xcprivacy")
    /// Resource file `ic_refresh_idle10@2x.png`.
    static let ic_refresh_idle102xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle10@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle11@2x.png`.
    static let ic_refresh_idle112xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle11@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle12@2x.png`.
    static let ic_refresh_idle122xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle12@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle13@2x.png`.
    static let ic_refresh_idle132xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle13@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle14@2x.png`.
    static let ic_refresh_idle142xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle14@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle15@2x.png`.
    static let ic_refresh_idle152xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle15@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle16@2x.png`.
    static let ic_refresh_idle162xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle16@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle17@2x.png`.
    static let ic_refresh_idle172xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle17@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle18@2x.png`.
    static let ic_refresh_idle182xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle18@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle19@2x.png`.
    static let ic_refresh_idle192xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle19@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle1@2x.png`.
    static let ic_refresh_idle12xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle1@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle20@2x.png`.
    static let ic_refresh_idle202xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle20@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle2@2x.png`.
    static let ic_refresh_idle22xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle2@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle3@2x.png`.
    static let ic_refresh_idle32xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle3@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle4@2x.png`.
    static let ic_refresh_idle42xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle4@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle5@2x.png`.
    static let ic_refresh_idle52xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle5@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle6@2x.png`.
    static let ic_refresh_idle62xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle6@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle7@2x.png`.
    static let ic_refresh_idle72xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle7@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle8@2x.png`.
    static let ic_refresh_idle82xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle8@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle9@2x.png`.
    static let ic_refresh_idle92xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle9@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading10@2x.png`.
    static let ic_refresh_loading102xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading10@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading11@2x.png`.
    static let ic_refresh_loading112xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading11@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading12@2x.png`.
    static let ic_refresh_loading122xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading12@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading13@2x.png`.
    static let ic_refresh_loading132xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading13@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading14@2x.png`.
    static let ic_refresh_loading142xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading14@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading15@2x.png`.
    static let ic_refresh_loading152xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading15@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading16@2x.png`.
    static let ic_refresh_loading162xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading16@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading17@2x.png`.
    static let ic_refresh_loading172xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading17@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading18@2x.png`.
    static let ic_refresh_loading182xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading18@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading19@2x.png`.
    static let ic_refresh_loading192xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading19@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading1@2x.png`.
    static let ic_refresh_loading12xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading1@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading20@2x.png`.
    static let ic_refresh_loading202xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading20@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading2@2x.png`.
    static let ic_refresh_loading22xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading2@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading3@2x.png`.
    static let ic_refresh_loading32xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading3@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading4@2x.png`.
    static let ic_refresh_loading42xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading4@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading5@2x.png`.
    static let ic_refresh_loading52xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading5@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading6@2x.png`.
    static let ic_refresh_loading62xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading6@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading7@2x.png`.
    static let ic_refresh_loading72xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading7@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading8@2x.png`.
    static let ic_refresh_loading82xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading8@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading9@2x.png`.
    static let ic_refresh_loading92xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading9@2x", pathExtension: "png")

    /// `bundle.url(forResource: ".swiftlint", withExtension: "yml")`
    static func swiftlintYml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.swiftlintYml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Configuration", withExtension: "json")`
    static func configurationJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.configurationJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "LanguageList", withExtension: "json")`
    static func languageListJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.languageListJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PrivacyInfo", withExtension: "xcprivacy")`
    static func privacyInfoXcprivacy(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.privacyInfoXcprivacy
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle10@2x", withExtension: "png")`
    static func ic_refresh_idle102xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle102xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle11@2x", withExtension: "png")`
    static func ic_refresh_idle112xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle112xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle12@2x", withExtension: "png")`
    static func ic_refresh_idle122xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle122xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle13@2x", withExtension: "png")`
    static func ic_refresh_idle132xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle132xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle14@2x", withExtension: "png")`
    static func ic_refresh_idle142xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle142xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle15@2x", withExtension: "png")`
    static func ic_refresh_idle152xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle152xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle16@2x", withExtension: "png")`
    static func ic_refresh_idle162xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle162xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle17@2x", withExtension: "png")`
    static func ic_refresh_idle172xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle172xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle18@2x", withExtension: "png")`
    static func ic_refresh_idle182xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle182xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle19@2x", withExtension: "png")`
    static func ic_refresh_idle192xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle192xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle1@2x", withExtension: "png")`
    static func ic_refresh_idle12xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle12xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle20@2x", withExtension: "png")`
    static func ic_refresh_idle202xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle202xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle2@2x", withExtension: "png")`
    static func ic_refresh_idle22xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle22xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle3@2x", withExtension: "png")`
    static func ic_refresh_idle32xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle32xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle4@2x", withExtension: "png")`
    static func ic_refresh_idle42xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle42xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle5@2x", withExtension: "png")`
    static func ic_refresh_idle52xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle52xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle6@2x", withExtension: "png")`
    static func ic_refresh_idle62xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle62xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle7@2x", withExtension: "png")`
    static func ic_refresh_idle72xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle72xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle8@2x", withExtension: "png")`
    static func ic_refresh_idle82xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle82xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle9@2x", withExtension: "png")`
    static func ic_refresh_idle92xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle92xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading10@2x", withExtension: "png")`
    static func ic_refresh_loading102xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading102xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading11@2x", withExtension: "png")`
    static func ic_refresh_loading112xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading112xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading12@2x", withExtension: "png")`
    static func ic_refresh_loading122xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading122xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading13@2x", withExtension: "png")`
    static func ic_refresh_loading132xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading132xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading14@2x", withExtension: "png")`
    static func ic_refresh_loading142xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading142xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading15@2x", withExtension: "png")`
    static func ic_refresh_loading152xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading152xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading16@2x", withExtension: "png")`
    static func ic_refresh_loading162xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading162xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading17@2x", withExtension: "png")`
    static func ic_refresh_loading172xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading172xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading18@2x", withExtension: "png")`
    static func ic_refresh_loading182xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading182xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading19@2x", withExtension: "png")`
    static func ic_refresh_loading192xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading192xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading1@2x", withExtension: "png")`
    static func ic_refresh_loading12xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading12xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading20@2x", withExtension: "png")`
    static func ic_refresh_loading202xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading202xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading2@2x", withExtension: "png")`
    static func ic_refresh_loading22xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading22xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading3@2x", withExtension: "png")`
    static func ic_refresh_loading32xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading32xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading4@2x", withExtension: "png")`
    static func ic_refresh_loading42xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading42xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading5@2x", withExtension: "png")`
    static func ic_refresh_loading52xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading52xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading6@2x", withExtension: "png")`
    static func ic_refresh_loading62xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading62xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading7@2x", withExtension: "png")`
    static func ic_refresh_loading72xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading72xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading8@2x", withExtension: "png")`
    static func ic_refresh_loading82xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading82xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading9@2x", withExtension: "png")`
    static func ic_refresh_loading92xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading92xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 56 images.
  struct image {
    /// Image `AppLogo`.
    static let appLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "AppLogo")
    /// Image `ic_about`.
    static let ic_about = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_about")
    /// Image `ic_checked`.
    static let ic_checked = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checked")
    /// Image `ic_feedback`.
    static let ic_feedback = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feedback")
    /// Image `ic_refresh_idle10`.
    static let ic_refresh_idle10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle10")
    /// Image `ic_refresh_idle11`.
    static let ic_refresh_idle11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle11")
    /// Image `ic_refresh_idle12`.
    static let ic_refresh_idle12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle12")
    /// Image `ic_refresh_idle13`.
    static let ic_refresh_idle13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle13")
    /// Image `ic_refresh_idle14`.
    static let ic_refresh_idle14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle14")
    /// Image `ic_refresh_idle15`.
    static let ic_refresh_idle15 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle15")
    /// Image `ic_refresh_idle16`.
    static let ic_refresh_idle16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle16")
    /// Image `ic_refresh_idle17`.
    static let ic_refresh_idle17 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle17")
    /// Image `ic_refresh_idle18`.
    static let ic_refresh_idle18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle18")
    /// Image `ic_refresh_idle19`.
    static let ic_refresh_idle19 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle19")
    /// Image `ic_refresh_idle1`.
    static let ic_refresh_idle1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle1")
    /// Image `ic_refresh_idle20`.
    static let ic_refresh_idle20 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle20")
    /// Image `ic_refresh_idle2`.
    static let ic_refresh_idle2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle2")
    /// Image `ic_refresh_idle3`.
    static let ic_refresh_idle3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle3")
    /// Image `ic_refresh_idle4`.
    static let ic_refresh_idle4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle4")
    /// Image `ic_refresh_idle5`.
    static let ic_refresh_idle5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle5")
    /// Image `ic_refresh_idle6`.
    static let ic_refresh_idle6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle6")
    /// Image `ic_refresh_idle7`.
    static let ic_refresh_idle7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle7")
    /// Image `ic_refresh_idle8`.
    static let ic_refresh_idle8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle8")
    /// Image `ic_refresh_idle9`.
    static let ic_refresh_idle9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle9")
    /// Image `ic_refresh_loading10`.
    static let ic_refresh_loading10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading10")
    /// Image `ic_refresh_loading11`.
    static let ic_refresh_loading11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading11")
    /// Image `ic_refresh_loading12`.
    static let ic_refresh_loading12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading12")
    /// Image `ic_refresh_loading13`.
    static let ic_refresh_loading13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading13")
    /// Image `ic_refresh_loading14`.
    static let ic_refresh_loading14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading14")
    /// Image `ic_refresh_loading15`.
    static let ic_refresh_loading15 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading15")
    /// Image `ic_refresh_loading16`.
    static let ic_refresh_loading16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading16")
    /// Image `ic_refresh_loading17`.
    static let ic_refresh_loading17 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading17")
    /// Image `ic_refresh_loading18`.
    static let ic_refresh_loading18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading18")
    /// Image `ic_refresh_loading19`.
    static let ic_refresh_loading19 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading19")
    /// Image `ic_refresh_loading1`.
    static let ic_refresh_loading1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading1")
    /// Image `ic_refresh_loading20`.
    static let ic_refresh_loading20 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading20")
    /// Image `ic_refresh_loading2`.
    static let ic_refresh_loading2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading2")
    /// Image `ic_refresh_loading3`.
    static let ic_refresh_loading3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading3")
    /// Image `ic_refresh_loading4`.
    static let ic_refresh_loading4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading4")
    /// Image `ic_refresh_loading5`.
    static let ic_refresh_loading5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading5")
    /// Image `ic_refresh_loading6`.
    static let ic_refresh_loading6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading6")
    /// Image `ic_refresh_loading7`.
    static let ic_refresh_loading7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading7")
    /// Image `ic_refresh_loading8`.
    static let ic_refresh_loading8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading8")
    /// Image `ic_refresh_loading9`.
    static let ic_refresh_loading9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading9")
    /// Image `ic_settings`.
    static let ic_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_settings")
    /// Image `ic_user_default`.
    static let ic_user_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_user_default")
    /// Image `ic_user_placeholder`.
    static let ic_user_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_user_placeholder")
    /// Image `personal_parallax_bg`.
    static let personal_parallax_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "personal_parallax_bg")
    /// Image `tabbar_event_normal`.
    static let tabbar_event_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_event_normal")
    /// Image `tabbar_event_selected`.
    static let tabbar_event_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_event_selected")
    /// Image `tabbar_favorite_normal`.
    static let tabbar_favorite_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_favorite_normal")
    /// Image `tabbar_favorite_selected`.
    static let tabbar_favorite_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_favorite_selected")
    /// Image `tabbar_personal_normal`.
    static let tabbar_personal_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_personal_normal")
    /// Image `tabbar_personal_selected`.
    static let tabbar_personal_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_personal_selected")
    /// Image `tabbar_trending_normal`.
    static let tabbar_trending_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_trending_normal")
    /// Image `tabbar_trending_selected`.
    static let tabbar_trending_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_trending_selected")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AppLogo", bundle: ..., traitCollection: ...)`
    static func appLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_about", bundle: ..., traitCollection: ...)`
    static func ic_about(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_about, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_checked", bundle: ..., traitCollection: ...)`
    static func ic_checked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_checked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_feedback", bundle: ..., traitCollection: ...)`
    static func ic_feedback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feedback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle1", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle10", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle11", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle12", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle13", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle13, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle14", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle14, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle15", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle15(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle15, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle16", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle16, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle17", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle17(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle17, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle18", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle19", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle19(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle19, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle2", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle20", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle20, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle3", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle4", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle5", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle6", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle7", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle8", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle9", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading1", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading10", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading11", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading12", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading13", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading13, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading14", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading14, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading15", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading15(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading15, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading16", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading16, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading17", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading17(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading17, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading18", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading19", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading19(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading19, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading2", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading20", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading20, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading3", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading4", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading5", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading6", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading7", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading8", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading9", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_settings", bundle: ..., traitCollection: ...)`
    static func ic_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_user_default", bundle: ..., traitCollection: ...)`
    static func ic_user_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_user_default, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_user_placeholder", bundle: ..., traitCollection: ...)`
    static func ic_user_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_user_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "personal_parallax_bg", bundle: ..., traitCollection: ...)`
    static func personal_parallax_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.personal_parallax_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_event_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_event_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_event_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_event_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_event_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_event_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_favorite_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_favorite_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_favorite_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_favorite_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_favorite_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_favorite_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_personal_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_personal_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_personal_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_personal_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_personal_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_personal_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_trending_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_trending_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_trending_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_trending_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_trending_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_trending_selected, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 42 localization keys.
    struct localizable {
      /// en translation: About
      ///
      /// Locales: en, zh-Hans
      static let about = Rswift.StringResource(key: "About", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Authorization failed
      ///
      /// Locales: en, zh-Hans
      static let errorAppMessage1 = Rswift.StringResource(key: "Error.App.Message1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Confirm logout?
      ///
      /// Locales: en, zh-Hans
      static let alertLogoutMessage = Rswift.StringResource(key: "Alert.Logout.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Data exception
      ///
      /// Locales: en, zh-Hans
      static let errorDataInvalidMessage = Rswift.StringResource(key: "Error.DataInvalid.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Data exception
      ///
      /// Locales: en, zh-Hans
      static let errorDataInvalidTitle = Rswift.StringResource(key: "Error.DataInvalid.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Dear, the current login has expired
      ///
      /// Locales: en, zh-Hans
      static let errorUserLoginExpiredMessage = Rswift.StringResource(key: "Error.User.LoginExpired.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Dear, you haven't logged in yet
      ///
      /// Locales: en, zh-Hans
      static let errorUserNotLoginedInMessage = Rswift.StringResource(key: "Error.User.NotLoginedIn.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: English
      ///
      /// Locales: en, zh-Hans
      static let english = Rswift.StringResource(key: "English", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Event
      ///
      /// Locales: en, zh-Hans
      static let event = Rswift.StringResource(key: "Event", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Exit
      ///
      /// Locales: en, zh-Hans
      static let exit = Rswift.StringResource(key: "Exit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Favorite
      ///
      /// Locales: en, zh-Hans
      static let favorite = Rswift.StringResource(key: "Favorite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Feedback
      ///
      /// Locales: en, zh-Hans
      static let feedback = Rswift.StringResource(key: "Feedback", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Follow system
      ///
      /// Locales: en, zh-Hans
      static let followSystem = Rswift.StringResource(key: "Follow System", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: List is empty
      ///
      /// Locales: en, zh-Hans
      static let errorListIsEmptyTitle = Rswift.StringResource(key: "Error.ListIsEmpty.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: en, zh-Hans
      static let login = Rswift.StringResource(key: "Login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Login expired
      ///
      /// Locales: en, zh-Hans
      static let errorUserLoginExpiredTitle = Rswift.StringResource(key: "Error.User.LoginExpired.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Login failed, please try again later
      ///
      /// Locales: en, zh-Hans
      static let errorAppMessage2 = Rswift.StringResource(key: "Error.App.Message2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Navigation error
      ///
      /// Locales: en, zh-Hans
      static let errorNavigationMessage = Rswift.StringResource(key: "Error.Navigation.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Navigation error
      ///
      /// Locales: en, zh-Hans
      static let errorNavigationTitle = Rswift.StringResource(key: "Error.Navigation.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Network anomaly
      ///
      /// Locales: en, zh-Hans
      static let errorNetworkNotReachableTitle = Rswift.StringResource(key: "Error.Network.NotReachable.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Network is not connected
      ///
      /// Locales: en, zh-Hans
      static let errorNetworkNotConnectedTitle = Rswift.StringResource(key: "Error.Network.NotConnected.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No
      ///
      /// Locales: en, zh-Hans
      static let no = Rswift.StringResource(key: "No", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: en, zh-Hans
      static let oK = Rswift.StringResource(key: "OK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Personal
      ///
      /// Locales: en, zh-Hans
      static let personal = Rswift.StringResource(key: "Personal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Placeholder Error
      ///
      /// Locales: en, zh-Hans
      static let errorNoneMessage = Rswift.StringResource(key: "Error.None.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Placeholder Error
      ///
      /// Locales: en, zh-Hans
      static let errorNoneTitle = Rswift.StringResource(key: "Error.None.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please check your network link
      ///
      /// Locales: en, zh-Hans
      static let errorNetworkNotConnectedMessage = Rswift.StringResource(key: "Error.Network.NotConnected.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, zh-Hans
      static let settings = Rswift.StringResource(key: "Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sure
      ///
      /// Locales: en, zh-Hans
      static let sure = Rswift.StringResource(key: "Sure", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The current list doesn't have any data yet
      ///
      /// Locales: en, zh-Hans
      static let errorListIsEmptyMessage = Rswift.StringResource(key: "Error.ListIsEmpty.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The current network access is inaccessible
      ///
      /// Locales: en, zh-Hans
      static let errorNetworkNotReachableMessage = Rswift.StringResource(key: "Error.Network.NotReachable.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Timeout error
      ///
      /// Locales: en, zh-Hans
      static let errorTimeoutMessage = Rswift.StringResource(key: "Error.Timeout.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Timeout error
      ///
      /// Locales: en, zh-Hans
      static let errorTimeoutTitle = Rswift.StringResource(key: "Error.Timeout.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Trending
      ///
      /// Locales: en, zh-Hans
      static let trending = Rswift.StringResource(key: "Trending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Unknown
      ///
      /// Locales: en, zh-Hans
      static let unknown = Rswift.StringResource(key: "Unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Unknown error
      ///
      /// Locales: en, zh-Hans
      static let errorUnknownMessage = Rswift.StringResource(key: "Error.Unknown.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Unknown error
      ///
      /// Locales: en, zh-Hans
      static let errorUnknownTitle = Rswift.StringResource(key: "Error.Unknown.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: User not logged in
      ///
      /// Locales: en, zh-Hans
      static let errorUserNotLoginedInTitle = Rswift.StringResource(key: "Error.User.NotLoginedIn.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Yes
      ///
      /// Locales: en, zh-Hans
      static let yes = Rswift.StringResource(key: "Yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: submit successfully
      ///
      /// Locales: en, zh-Hans
      static let toastSubmitMessage = Rswift.StringResource(key: "Toast.Submit.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 中文
      ///
      /// Locales: en, zh-Hans
      static let chinese = Rswift.StringResource(key: "Chinese", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)

      /// en translation: About
      ///
      /// Locales: en, zh-Hans
      static func about(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("About", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "About"
        }

        return NSLocalizedString("About", bundle: bundle, comment: "")
      }

      /// en translation: Authorization failed
      ///
      /// Locales: en, zh-Hans
      static func errorAppMessage1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.App.Message1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.App.Message1"
        }

        return NSLocalizedString("Error.App.Message1", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel"
        }

        return NSLocalizedString("Cancel", bundle: bundle, comment: "")
      }

      /// en translation: Confirm logout?
      ///
      /// Locales: en, zh-Hans
      static func alertLogoutMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Alert.Logout.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Alert.Logout.Message"
        }

        return NSLocalizedString("Alert.Logout.Message", bundle: bundle, comment: "")
      }

      /// en translation: Data exception
      ///
      /// Locales: en, zh-Hans
      static func errorDataInvalidMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.DataInvalid.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.DataInvalid.Message"
        }

        return NSLocalizedString("Error.DataInvalid.Message", bundle: bundle, comment: "")
      }

      /// en translation: Data exception
      ///
      /// Locales: en, zh-Hans
      static func errorDataInvalidTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.DataInvalid.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.DataInvalid.Title"
        }

        return NSLocalizedString("Error.DataInvalid.Title", bundle: bundle, comment: "")
      }

      /// en translation: Dear, the current login has expired
      ///
      /// Locales: en, zh-Hans
      static func errorUserLoginExpiredMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.User.LoginExpired.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.User.LoginExpired.Message"
        }

        return NSLocalizedString("Error.User.LoginExpired.Message", bundle: bundle, comment: "")
      }

      /// en translation: Dear, you haven't logged in yet
      ///
      /// Locales: en, zh-Hans
      static func errorUserNotLoginedInMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.User.NotLoginedIn.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.User.NotLoginedIn.Message"
        }

        return NSLocalizedString("Error.User.NotLoginedIn.Message", bundle: bundle, comment: "")
      }

      /// en translation: English
      ///
      /// Locales: en, zh-Hans
      static func english(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("English", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "English"
        }

        return NSLocalizedString("English", bundle: bundle, comment: "")
      }

      /// en translation: Event
      ///
      /// Locales: en, zh-Hans
      static func event(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Event", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Event"
        }

        return NSLocalizedString("Event", bundle: bundle, comment: "")
      }

      /// en translation: Exit
      ///
      /// Locales: en, zh-Hans
      static func exit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Exit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Exit"
        }

        return NSLocalizedString("Exit", bundle: bundle, comment: "")
      }

      /// en translation: Favorite
      ///
      /// Locales: en, zh-Hans
      static func favorite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Favorite", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Favorite"
        }

        return NSLocalizedString("Favorite", bundle: bundle, comment: "")
      }

      /// en translation: Feedback
      ///
      /// Locales: en, zh-Hans
      static func feedback(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Feedback", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Feedback"
        }

        return NSLocalizedString("Feedback", bundle: bundle, comment: "")
      }

      /// en translation: Follow system
      ///
      /// Locales: en, zh-Hans
      static func followSystem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Follow System", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Follow System"
        }

        return NSLocalizedString("Follow System", bundle: bundle, comment: "")
      }

      /// en translation: List is empty
      ///
      /// Locales: en, zh-Hans
      static func errorListIsEmptyTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.ListIsEmpty.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.ListIsEmpty.Title"
        }

        return NSLocalizedString("Error.ListIsEmpty.Title", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: en, zh-Hans
      static func login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login"
        }

        return NSLocalizedString("Login", bundle: bundle, comment: "")
      }

      /// en translation: Login expired
      ///
      /// Locales: en, zh-Hans
      static func errorUserLoginExpiredTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.User.LoginExpired.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.User.LoginExpired.Title"
        }

        return NSLocalizedString("Error.User.LoginExpired.Title", bundle: bundle, comment: "")
      }

      /// en translation: Login failed, please try again later
      ///
      /// Locales: en, zh-Hans
      static func errorAppMessage2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.App.Message2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.App.Message2"
        }

        return NSLocalizedString("Error.App.Message2", bundle: bundle, comment: "")
      }

      /// en translation: Navigation error
      ///
      /// Locales: en, zh-Hans
      static func errorNavigationMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.Navigation.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.Navigation.Message"
        }

        return NSLocalizedString("Error.Navigation.Message", bundle: bundle, comment: "")
      }

      /// en translation: Navigation error
      ///
      /// Locales: en, zh-Hans
      static func errorNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.Navigation.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.Navigation.Title"
        }

        return NSLocalizedString("Error.Navigation.Title", bundle: bundle, comment: "")
      }

      /// en translation: Network anomaly
      ///
      /// Locales: en, zh-Hans
      static func errorNetworkNotReachableTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.Network.NotReachable.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.Network.NotReachable.Title"
        }

        return NSLocalizedString("Error.Network.NotReachable.Title", bundle: bundle, comment: "")
      }

      /// en translation: Network is not connected
      ///
      /// Locales: en, zh-Hans
      static func errorNetworkNotConnectedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.Network.NotConnected.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.Network.NotConnected.Title"
        }

        return NSLocalizedString("Error.Network.NotConnected.Title", bundle: bundle, comment: "")
      }

      /// en translation: No
      ///
      /// Locales: en, zh-Hans
      static func no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No"
        }

        return NSLocalizedString("No", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: en, zh-Hans
      static func oK(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OK", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OK"
        }

        return NSLocalizedString("OK", bundle: bundle, comment: "")
      }

      /// en translation: Personal
      ///
      /// Locales: en, zh-Hans
      static func personal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Personal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Personal"
        }

        return NSLocalizedString("Personal", bundle: bundle, comment: "")
      }

      /// en translation: Placeholder Error
      ///
      /// Locales: en, zh-Hans
      static func errorNoneMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.None.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.None.Message"
        }

        return NSLocalizedString("Error.None.Message", bundle: bundle, comment: "")
      }

      /// en translation: Placeholder Error
      ///
      /// Locales: en, zh-Hans
      static func errorNoneTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.None.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.None.Title"
        }

        return NSLocalizedString("Error.None.Title", bundle: bundle, comment: "")
      }

      /// en translation: Please check your network link
      ///
      /// Locales: en, zh-Hans
      static func errorNetworkNotConnectedMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.Network.NotConnected.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.Network.NotConnected.Message"
        }

        return NSLocalizedString("Error.Network.NotConnected.Message", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, zh-Hans
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings"
        }

        return NSLocalizedString("Settings", bundle: bundle, comment: "")
      }

      /// en translation: Sure
      ///
      /// Locales: en, zh-Hans
      static func sure(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sure", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sure"
        }

        return NSLocalizedString("Sure", bundle: bundle, comment: "")
      }

      /// en translation: The current list doesn't have any data yet
      ///
      /// Locales: en, zh-Hans
      static func errorListIsEmptyMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.ListIsEmpty.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.ListIsEmpty.Message"
        }

        return NSLocalizedString("Error.ListIsEmpty.Message", bundle: bundle, comment: "")
      }

      /// en translation: The current network access is inaccessible
      ///
      /// Locales: en, zh-Hans
      static func errorNetworkNotReachableMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.Network.NotReachable.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.Network.NotReachable.Message"
        }

        return NSLocalizedString("Error.Network.NotReachable.Message", bundle: bundle, comment: "")
      }

      /// en translation: Timeout error
      ///
      /// Locales: en, zh-Hans
      static func errorTimeoutMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.Timeout.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.Timeout.Message"
        }

        return NSLocalizedString("Error.Timeout.Message", bundle: bundle, comment: "")
      }

      /// en translation: Timeout error
      ///
      /// Locales: en, zh-Hans
      static func errorTimeoutTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.Timeout.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.Timeout.Title"
        }

        return NSLocalizedString("Error.Timeout.Title", bundle: bundle, comment: "")
      }

      /// en translation: Trending
      ///
      /// Locales: en, zh-Hans
      static func trending(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Trending", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Trending"
        }

        return NSLocalizedString("Trending", bundle: bundle, comment: "")
      }

      /// en translation: Unknown
      ///
      /// Locales: en, zh-Hans
      static func unknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Unknown"
        }

        return NSLocalizedString("Unknown", bundle: bundle, comment: "")
      }

      /// en translation: Unknown error
      ///
      /// Locales: en, zh-Hans
      static func errorUnknownMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.Unknown.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.Unknown.Message"
        }

        return NSLocalizedString("Error.Unknown.Message", bundle: bundle, comment: "")
      }

      /// en translation: Unknown error
      ///
      /// Locales: en, zh-Hans
      static func errorUnknownTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.Unknown.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.Unknown.Title"
        }

        return NSLocalizedString("Error.Unknown.Title", bundle: bundle, comment: "")
      }

      /// en translation: User not logged in
      ///
      /// Locales: en, zh-Hans
      static func errorUserNotLoginedInTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.User.NotLoginedIn.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.User.NotLoginedIn.Title"
        }

        return NSLocalizedString("Error.User.NotLoginedIn.Title", bundle: bundle, comment: "")
      }

      /// en translation: Yes
      ///
      /// Locales: en, zh-Hans
      static func yes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Yes"
        }

        return NSLocalizedString("Yes", bundle: bundle, comment: "")
      }

      /// en translation: submit successfully
      ///
      /// Locales: en, zh-Hans
      static func toastSubmitMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Toast.Submit.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Toast.Submit.Message"
        }

        return NSLocalizedString("Toast.Submit.Message", bundle: bundle, comment: "")
      }

      /// en translation: 中文
      ///
      /// Locales: en, zh-Hans
      static func chinese(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Chinese", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Chinese"
        }

        return NSLocalizedString("Chinese", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "AppLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'AppLogo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
